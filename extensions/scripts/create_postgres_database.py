import argparse
import json
import socket
import time
import psycopg2


def connectPsqlRoot(autocommit = False):
    conn = psycopg2.connect(
        host="localhost",
        database="postgres",
        user="postgres",
        password="123qwe"
    )
    cur = conn.cursor()
    conn.autocommit = autocommit
    return conn, cur

dbName = 'db_postgres_test'
dbUser = 'db_postgres_test'
dbPass = 'db_postgres_test'
def connectPsql(autocommit = False):
    conn = psycopg2.connect(
        host="localhost",
        database=dbName,
        user=dbUser,
        password=dbPass
    )
    cur = conn.cursor()
    conn.autocommit = autocommit
    return conn, cur

def psqlQuery(cur, sql, autocommit = False):
    cur.execute(sql)
    try:
        records = cur.fetchall()
        print(f'result: {records}')
        return records
    except Exception as err:
        print(f'psqlQuery | error: {err}')
        return None
def createDatabase():

    _, curSel = connectPsqlRoot()
    result = psqlQuery(curSel, f"""
    SELECT 1 FROM pg_user WHERE usename = '{dbUser}';
    """)
    if result:
        pass
    else:
        _, cur = connectPsqlRoot(autocommit=True)
        cur.execute(f"""
        CREATE USER {dbUser} WITH PASSWORD '{dbPass}' CREATEDB CREATEROLE;
        """)


    result = psqlQuery(curSel, """
    SELECT 1 FROM pg_database WHERE datname = 'db_postgres_test';
    """)
    if result:
        pass
    else: 
        conn, cursor = connectPsqlRoot(autocommit=True)
        cursor.execute(f'CREATE DATABASE {dbName}')
        cursor.execute(f'GRANT ALL PRIVILEGES ON DATABASE {dbName} TO {dbUser}')
        cursor.close()
        conn.close()



    # result = psqlQuery(cur, """
    # SELECT 1 FROM pg_database WHERE datname = 'db_postgres_test';
    # """)
    # if result:
    #     pass
    # else: 
    #     conn, cursor = connectPsql(autocommit=True)
    #     cursor.execute(f'CREATE DATABASE {dbName}')
    #     cursor.execute(f'GRANT ALL PRIVILEGES ON DATABASE {dbName} TO {dbUser}')
    #     cursor.close()
    #     conn.close()

    conn, cur = connectPsql(autocommit=True)
    cur.execute('''
        do $$
            declare longString varchar;
        begin
        drop table if exists db_postgres_test.public.test;
        CREATE TABLE IF NOT EXISTS db_postgres_test.public.test (
            did    			integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            title			name,
            boolField		boolean,
            int2Field		int2,
            int4Field		int4,
            int8Field		int8,
            float4Field		float4,
            float8Field		float8,
            charField  		char,
            bpCharField  	char(4),
            bpVarcharField  varchar(8),
            varcharField  	varchar,
            nameField		name,
            textField  		text,
            timestampField 		timestamp,
            timestampzField 	timestamp with time zone,
            dateField		date,
            timeField		time,
            jsonField		json,
            jsonbField		jsonb
        );
        longString := '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
        descroption';
        insert into test (title, boolfield) values ('boolfield', true);
        insert into test (title, int2Field) values ('int2Field', -32768);
        insert into test (title, int2Field) values ('int2Field', 32767);
        insert into test (title, int4Field) values ('int4Field', -2147483648);
        insert into test (title, int4Field) values ('int4Field', 2147483647);
        insert into test (title, int8Field) values ('int8Field', -9223372036854775808);
        insert into test (title, int8Field) values ('int8Field', 9223372036854775807);
        insert into test (title, charField) values ('char', '1');
        insert into test (title, bpCharField) values ('bpChar', '1234');
        insert into test (title, bpVarCharField) values ('bpVarChar', '12345678');
        insert into test (title, varcharField) values ('varchar', longString);
        insert into test (title, nameField) values ('name', longString);
        insert into test (title, textField) values ('text', longString);
        insert into test (title, timestampField) values ('timestamp', '2004-10-19 10:23:54');
        insert into test (title, timestampzField) values ('timestampz', '2004-10-19 10:23:54+02');
        insert into test (title, dateField) values ('date', '2004-10-19');
        insert into test (title, timeField) values ('time', '10:23:54');
        insert into test (title, jsonField) values ('json', '{"a":123, "b": 456}');
        insert into test (title, jsonbField) values ('jsonb', '{"a":123, "b": 456}'::jsonb);
        end$$;                
    ''')
    cur.close()
    conn.close()
